Model : Listing  -->palces(apartment , house , flat)

- title : string
-description : string
- image : url / link   string
- price :
-location : string
- country :
   

   index route 
   GET / listings  -> all listings
       /listing: index


    Read : show route 
   GET /listings/:id

   for geting price in the indian standard we covert it into the localstring 


   Create :New & Create route
   GET    /listing/new   -> form ->submit ->    POST  /listings


   //index route
router.get("/", wrapAsync(listingController.index));

//Create route
router.post(
  "/",
  isLoggedIn,
  validateListing,
  wrapAsync(listingController.createListing)
);

//show route
router.get("/:id", wrapAsync(listingController.showListing));

//Update route
router.put(
  "/:id",
  isLoggedIn,
  isOwner,
  validateListing,
  wrapAsync(listingController.updateListing)
);

//Delete route
router.delete(
  "/:id",
  isLoggedIn,
  isOwner,
  wrapAsync(listingController.deleteListing)
);



new ejs 
<div class="mb-3">
        <label for="image" class="form-label">Image Link</label>
        <input
          type="text"
          name="listing[image]"
          placeholder="Enter image URL/link"
          class="form-control"
        />
      </div>



create listing 
// let{title , description , image , price , location , country}=req.body ;
  //for error checking
  // if (!req.body.listing) {
  //   throw new ExpressError(400, "Send valid data for listings");
  // }

  // let result = listingSchema.validate(req.body);
  // console.log(result);
  // if (result.error) {
  //   throw new ExpressError(400, result.error);
  // }

  // if(newListing.description){
  //     throw new ExpressError(400, "Description is missing");
  // }
  // if(newListing.title){
  //     throw new ExpressError(400, "Title is missing");
  // }



  geocoding ..process of converting the address into geographic coordinates 
  foe saving the data of cordinates geoJSON


  mapbox marker 
  marker popup

  have to add the icon in map when popup see the airbnb


  geometry : {
    type: {
      type: String, // Don't do `{ location: { type: String } }`
      enum: ['Point'], // 'location.type' must be 'Point'
      required: true
    },
    coordinates: {
      type: [Number],
      required: true
    }
  },
  category:{
    type: String,
    enum:["mountains" , "arctic", "farms", "deserts" , "rooms" , "iconic Cities" ,"castles" , "amazing Pools" , "camping" ]
  }